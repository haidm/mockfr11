<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magento.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magento.com for more information.
 *
 * @category    design
 * @package     rwd_default
 * @copyright   Copyright (c) 2006-2017 X.commerce, Inc. and affiliates (http://www.magento.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>

<?php
$_product    = $this->getProduct();
$_attributes = Mage::helper('core')->decorateArray($this->getAllowAttributes());
$_jsonConfig = $this->getJsonConfig();
$attrOption  = json_decode($_jsonConfig);
$_renderers = $this->getChild('attr_renderers')->getSortedChildren();

if($_product->getTypeId() == 'configurable') {
    $i = 0;
    $config = array();
    $childProducts = Mage::getModel('catalog/product_type_configurable')
        ->getUsedProducts(null, $_product);

    foreach ($childProducts as $child) {
        setLaybel($attrOption, 'new', $child->getId(), $config['new'], $i);
        setLaybel($attrOption, 'sale', $child->getId(), $config['sale'], $i);
        setLaybel($attrOption, 'promotion', $child->getId(), $config['promotion'], $i);
        $i++;
    }
}
$attributeModel = Mage::getModel('eav/entity_attribute');
?>
<?php if ($_product->isSaleable() && count($_attributes)):?>
    <dl>
    <?php foreach($_attributes as $_attribute): ?>
        <?php
        $attributeModel->load($_attribute->getAttributeId());
        $_rendered = false;
        foreach ($_renderers as $_rendererName):
            $_renderer = $this->getChild('attr_renderers')->getChild($_rendererName);
            if (method_exists($_renderer, 'shouldRender') && $_renderer->shouldRender($_attribute, $_jsonConfig)):
                $_renderer->setProduct($_product);
                $_renderer->setAttributeObj($_attribute);
                echo $_renderer->toHtml();
                $_rendered = true;
                break;
            endif;
        endforeach;

        if (!$_rendered):
        ?>
        <dt><label class="required"><em>*</em><?php echo $_attribute->getLabel() ?></label></dt>
        <dd<?php if ($_attribute->decoratedIsLast){?> class="last"<?php }?>>
            <div class="input-box">
                <select name="super_attribute[<?php echo $_attribute->getAttributeId() ?>]" id="attribute<?php echo $_attribute->getAttributeId() ?>" class="required-entry super-attribute-select" attrCode="<?php echo $attributeModel->getAttributeCode(); ?>">
                    <option><?php echo $this->__('Choose an Option...') ?></option>
                  </select>
              </div>
        </dd>
        <?php endif; ?>
    <?php endforeach; ?>
    </dl>
    <script type="text/javascript">
        var spConfig = new Product.Config(<?php echo $_jsonConfig ?>);
        var attrConfig = <?php echo json_encode($config) ?>;
    </script>
    <?php echo $this->getChildHtml('after') ?>
<?php endif;?>
<?php
function setLaybel($attrOption, $needle, $id, &$result, $i)
{
    $prdModel = Mage::getModel('catalog/product');
    $prdToArray = $prdModel->load($id)->toArray();
    $label = $prdToArray['product_label'];
    if(strpos($label, $needle) !== false) {
        foreach ($attrOption->attributes as $item) {
            $result[$i] .= ',' . $item->code . ':' .$prdToArray[$item->code];
        }
    }
}
